import { useState } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { Avatar, AvatarFallback, AvatarImage } from "/components/ui/avatar"
import { Upload } from "lucide-react"

export default function TelegramChatbot() {
  const [firstName, setFirstName] = useState('')
  const [username, setUsername] = useState('')
  const [contactSubmitted, setContactSubmitted] = useState(false)
  const [userQuery, setUserQuery] = useState('')
  const [chatHistory, setChatHistory] = useState<{ message: string, sender: 'user' | 'bot', timestamp: string }[]>([])
  const [file, setFile] = useState<File | null>(null)
  const [fileAnalysis, setFileAnalysis] = useState<string | null>(null)

  const handleContactSubmit = () => {
    setContactSubmitted(true)
  }

  const handleQuerySubmit = () => {
    if (userQuery.trim()) {
      const timestamp = new Date().toLocaleTimeString()
      setChatHistory([...chatHistory, { message: userQuery, sender: 'user', timestamp }])
      setUserQuery('')

      // Simulate bot response
      setTimeout(() => {
        const botResponse = getBotResponse(userQuery)
        setChatHistory(prevHistory => [
          ...prevHistory,
          { message: botResponse, sender: 'bot', timestamp }
        ])
      }, 1000)
    }
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const uploadedFile = event.target.files?.[0]
    if (uploadedFile) {
      setFile(uploadedFile)
      // Simulate file analysis
      setFileAnalysis(Analysis of ${uploadedFile.name}: This is a simulated analysis result.)
    }
  }

  const getBotResponse = (userQuery: string): string => {
    const lowerCaseQuery = userQuery.toLowerCase()
    if (lowerCaseQuery.includes('hi') || lowerCaseQuery.includes('hello')) {
      return "Hello! How can I assist you today?"
    } else if (lowerCaseQuery.includes('how are you')) {
      return "I'm just a bot, but I'm here and ready to help you!"
    } else if (lowerCaseQuery.includes('what can you do')) {
      return "I can answer questions, provide information, and assist with a variety of tasks."
    } else {
      return "I'm not sure how to respond to that, but I'll do my best to help!"
    }
  }

  return (
    <div className="min-h-screen flex flex-col bg-white">
      {/* Header */}
      <header className="bg-primary text-primary-foreground shadow-lg">
        <div className="container mx-auto px-4 py-6 flex justify-between items-center">
          <h1 className="text-2xl font-bold">Telegram AI Chatbot</h1>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* User Registration and Contact Request */}
          <Card>
            <CardHeader>
              <CardTitle>User Registration</CardTitle>
            </CardHeader>
            <CardContent>
              {!contactSubmitted ? (
                <>
                  <div className="mb-4">
                    <Label htmlFor="first-name">First Name</Label>
                    <Input
                      id="first-name"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      className="mt-2"
                    />
                  </div>
                  <div className="mb-4">
                    <Label htmlFor="username">Username</Label>
                    <Input
                      id="username"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      className="mt-2"
                    />
                  </div>
                  <Button onClick={handleContactSubmit}>Contact Request</Button>
                </>
              ) : (
                <p className="text-green-500">Contact request submitted!</p>
              )}
            </CardContent>
          </Card>

          {/* Gemini-Powered Chat */}
          <Card>
            <CardHeader>
              <CardTitle>Gemini-Powered Chat</CardTitle>
            </CardHeader>
            <CardContent className="h-96 overflow-y-auto">
              {chatHistory.map((entry, index) => (
                <div key={index} className={flex mb-4 ${entry.sender === 'user' ? 'justify-end' : 'justify-start'}}>
                  <div className={p-2 rounded-lg ${entry.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-black'}}>
                    <div className="flex items-center">
                      {entry.sender === 'user' ? (
                        <Avatar className="mr-2">
                          <AvatarImage src="https://github.com/nutlope.png" />
                          <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                      ) : (
                        <Avatar className="mr-2">
                          <AvatarImage src="https://github.com/shadcn.png" />
                          <AvatarFallback>AI</AvatarFallback>
                        </Avatar>
                      )}
                      <div>
                        <p className="font-bold">{entry.sender === 'user' ? 'You' : 'AI'}</p>
                        <p className="text-sm text-gray-500">{entry.timestamp}</p>
                      </div>
                    </div>
                    <p className="mt-1">{entry.message}</p>
                  </div>
                </div>
              ))}
            </CardContent>
            <CardFooter className="flex justify-between items-center">
              <Input
                value={userQuery}
                onChange={(e) => setUserQuery(e.target.value)}
                placeholder="Type a message..."
                className="w-full mr-2"
              />
              <Button onClick={handleQuerySubmit}>Send</Button>
            </CardFooter>
          </Card>

          {/* Image/File Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>Image/File Analysis</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <Button variant="outline" onClick={() => document.getElementById('file-upload')?.click()}>
                  <Upload className="mr-2 h-4 w-4" /> Upload File
                </Button>
                <input
                  id="file-upload"
                  type="file"
                  className="hidden"
                  onChange={handleFileUpload}
                />
              </div>
              {file && (
                <div className="mb-4">
                  <p className="font-bold">Uploaded File:</p>
                  <p>{file.name}</p>
                  <p className="text-sm text-gray-500">Size: {file.size} bytes</p>
                </div>
              )}
              {fileAnalysis && (
                <div>
                  <p className="font-bold">Analysis Result:</p>
                  <p>{fileAnalysis}</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-muted mt-8">
        <div className="container mx-auto px-4 py-6 text-center">
          <p>&copy; 2023 Telegram AI Chatbot. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}